										DAY-1
										======
Language:
=========



Programming Language:
=====================
		POP 					OOP
B,BCPl,C,COBOl,Photon...		java,c++,python,.net,smalltalk

			1)Performance
			2)Security


					OOPS	->inheritance,polymorphisam,abstraction,encapsulation
					
			1)Performance	inheritance,polymorphisam
			2)Security		abstraction,encapsulation	

Why JAVA:
=========

1995 JDK1.0

Java Development Kit

JAVA setup 

https://www.oracle.com/in/java/technologies/downloads/#java8-windows


JDK-->JRE-->JVM


.html,.cpp,.py,.java


alphabets-26
telugu-56

welcome to ericcson

keywords -->53-->lower case 

Compalition is a process of converting source code to byte code (compiler )

JVM will execute .class 

https://en.wikipedia.org/wiki/Java_version_history

//JVM-->0's 1's -->binary /byte code   --->byte code 

//compiler -->user understandble --->machine under
//            source code --->byte code 
//					.java --->.class   --->execute JVM


					JAVA
	JSE 			JEE        		JME 	


Different kinds of applications:
================================


1)Standalone/desktop applications  Ex:vlc media,antivirus ,eclipse,notepad++ JSE:corejava,awt,swings,applets

2)web applications			insta,fb,gmail,.....URL JEE:spring,springboot,mvc,servlet,jsp,jsf,jpa......

3)distributed applications		Banking ,webservices(REST)

4)mobile appllications			JME:Android 


	IDE:eclipse,intellji,net beans,myeclipse,vscode...


Identifiers:
=============
any name in java -->variable,class,interface,method name.....


		a-z
		A-Z
		0-9
		$
		_

Variables:
============
		sandeepjavatrainer 	9494348734	

			variable syntax:

				datatype varname=value
			
					byte age=29;


DataTypes
=============

PDT 			NPDT(String,arrays....)


		PDT
8 	
byte	1 byte		-128 to 127
short	2 bytes		-32768 to 32767
int 	4 bytes		-2147483768 to 2147583767
long	8 bytes		 				long	age=29;

float    4bytes			 32322.5043434343
double	 8bytes				32322.50434343434343

boolean	  1  bit			true-1,false-0
char 	  2 bytes        'M'/'F'

		1 byte

			C->ENGLISH	ASCII



2 types variables

	1)local variables		inside the method 
						
	2)global variables		outside the method
	

instance and static variables/methods/block :   java welcome
==========================================
1)syntax:
===========
	static int countryCode=91;//static 
			int empId=111;//instance
2)memory
=========
		instance variables will get memory space when ever create object//heap
		static variables will get memory space when ever class loading into jvm (Only once)//method 

		class->logical ,object->physical 
3)Access
===========
		static variables can be accessed by using classname
		instance variables can be accessed by using objref


4)Usage:
========
   to represent common data like orgname,countryname,schoolname,clgname...go for static 
   to represent unique data like empid,aadhar,padn,contact,..go for instance 



Methods://functions
========
								void		
accessmodifier static/instance returntype methodname(param list)
{



}
package :
==========
https://docs.oracle.com/javase/8/docs/api/


											   DAY-2
											===========

OOPS:
-----


Inheritance:
============
		Code Reusability-->performance

extends,implements

class Demo
{
//100 methods
1
}

class Hello extends Demo    class A
{
//50 methods
}

5 levels 





concrete method
accessmodifier static/instance returntype methodname(param list)
{



}

public void m1()//concrte method
{


}
abstract method
public abstract void m1();

class :class is a collection of only concrete methods   0%

abstract class :abstract class is a combination both concrete and abstract methods
					0-100%
interface  :interface is a combination of only abstract methods
					100%

Abstraction:hiding the implementation showcasing functionalities 
		abstract classes
		interfaces 

interface Demo
{
//by default interface methods are public abstract 

//interface variables are public static final

//we cannot create object for abstract class and interface 
}


Multiple inheritance is not supported by java @ class level

Multiple inheritance is  supported by java @ interface level


interface Parent 			interface parent1

		m1();				m1();




class Child implements Parent,Parent1

main()
{
Child child=new Child();
	child.m1()

}

m1()
{

}

Polymorphisam:
==============
many forms 	

		method overloading / compile time polymorphisam /static binding
		method overriding /runtime polymorphisam / dynamic binding 

method overloading :
=====================
		method name is same signature is different 
								no of params
								order of params
								type of params


method overriding:
===================
		method name is same body/implementation is different 


class Parent
{
wealth()
{
return "1000crores";
}
marriage()
{

return "xyz";
}

}
class Shreyansh extends Parent 
{
@Override
marriage()
{

return "abc";
}
}

Encapsulation,this,super,final,public,private,protected,default,constructor



constructor:
============ ex2 

Welcome

		classname objname=new classname();
		Welcome wel=new Welcome();

		
1)it is used intialize the object

2)used to provide defualt values for instance variables


constrctor name class name must be same 

constrctor looks like method


default constructor
param constrctor


Final:
=========

before the variable
		before the method
		before the class
		
final :we can't modify final variable value
		we can't override final method
		final classes can'tbe inherted 
		
		

public :every where
private:in class
protected:inside package and outside package when it is sub
default:package



Encapsulation:
==============

warpping up the data and related methods together 

class

data private 
methods public 

String ,StringBuffer,StringBuilder

		
		
		public void m1()
		{
		
		}

		public synchronized void m2()
		{
		
		}







												DAY-3
												=====
Exception Handling



IOStreams






multi threading


												DAY-4
												=====

collections



java8 features




jdbc mysql

												DAY-5
												=====
												
Pending concepts & Case Study												
